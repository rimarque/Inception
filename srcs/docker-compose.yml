services:
    mariadb:
      container_name: mdb_cont
      build:
        context: ./requirements/mariadb
        dockerfile: Dockerfile
      image: mariadb
      env_file:
        - ./.env
      init: true
      restart: on-failure
      volumes:
        - database:/var/lib/mysql
      ports:
        - "3306:3306"
      networks:
        - Inception
    wordpress:
      container_name: wp_cont
      build:
        context: ./requirements/wordpress
        dockerfile: Dockerfile
      image: wordpress
      env_file:
        - ./.env
      depends_on:
        - mariadb
      restart: on-failure
      ports:
        - "9000:9000" # Map port 9000 on host to port 9000 in container - publishing a port
                      # This allows external clients to access the services running inside the container.
      volumes:
        - wordpress_files:/var/www/inception/
      networks:
      - Inception
    nginx:
      container_name: ngx_cont
      build:
        context: ./requirements/nginx
        dockerfile: Dockerfile
      image: nginx
      env_file:
        - ./.env
      depends_on:
       - wordpress
      restart: on-failure
      ports:
        - "443:443"  # HTTPS port for NGINX
      volumes:
        - wordpress_files:/var/www/inception/
      networks:
        - Inception

volumes:
  database:
    driver: local # default
    driver_opts:  # options, if not specifyed it would be a managed volume (managed by Docker and stored independently from host filesystem)
                  # I use options to be able to do a bind mount of a specific file or directory from the host filesystem into the container 
                  # and adere to the subjects requirements
      type: none
      o: bind
      device: ~/data/database
  wordpress_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/data/wordpress_files

# Setting up a bridge netwoork so containers can communicate with each other
networks:
  Inception:
    driver: bridge
